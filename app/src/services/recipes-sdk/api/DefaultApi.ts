/**
 * Recipes-API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2016-11-27T08:46:09Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class DefaultApi {
    protected basePath = 'https://602h2dvv4h.execute-api.us-east-1.amazonaws.com/development';
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * 
     * @param recipe 
     */
    public recipesCreate(recipe: models.Recipe, extraHttpRequestParams?: any): Observable<models.Recipe> {
        let path = this.basePath + '/recipes';
        let verb = 'POST';
        if (recipe.recipeId && recipe.recipeId != '') {
            verb = 'PUT';
        }
        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'recipe' is not null or undefined
        if (recipe === null || recipe === undefined) {
            throw new Error('Required parameter recipe was null or undefined when calling recipesCreate.');
        }

        let requestOptions: RequestOptionsArgs = {
            method: verb,
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(recipe);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param recipeId 
     */
    public recipesDelete(recipeId: string, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/recipes/{recipeId}'
            .replace('{' + 'recipeId' + '}', String(recipeId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'recipeId' is not null or undefined
        if (recipeId === null || recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling recipesDelete.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param recipeId 
     */
    public recipesGet(recipeId: string, extraHttpRequestParams?: any): Observable<models.Recipe> {
        const path = this.basePath + '/recipes/{recipeId}'
            .replace('{' + 'recipeId' + '}', String(recipeId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'recipeId' is not null or undefined
        if (recipeId === null || recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling recipesGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public feed(category?:string,extraHttpRequestParams?: any): Observable<models.RecipesListResponse> {
        const path = this.basePath + '/feed/{category}'
            .replace('{' + 'category' + '}', String(category));
        console.log("inside feed category: " + path);
        
        let headerParams = this.defaultHeaders;
        let queryParameters = new URLSearchParams();
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param recipeId 
     */
    public recipesRecipeIdOptions(recipeId: string, extraHttpRequestParams?: any): Observable<{}> {
        const path = this.basePath + '/recipes/{recipeId}'
            .replace('{' + 'recipeId' + '}', String(recipeId));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'recipeId' is not null or undefined
        if (recipeId === null || recipeId === undefined) {
            throw new Error('Required parameter recipeId was null or undefined when calling recipesRecipeIdOptions.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'OPTIONS',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
